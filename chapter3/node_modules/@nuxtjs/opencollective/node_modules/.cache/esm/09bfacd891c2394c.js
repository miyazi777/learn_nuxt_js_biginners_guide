"main";_91c‍.x([["collectiveSlugFromUrl",()=>collectiveSlugFromUrl],["collectiveUrl",()=>collectiveUrl],["collectiveLogoUrl",()=>collectiveLogoUrl],["collectiveDonationText",()=>collectiveDonationText],["getCollective",()=>getCollective],["collectiveDonationUrl",()=>collectiveDonationUrl],["retrieveDonationSlug",()=>retrieveDonationSlug]]);let reportAndThrowError,stripLeadingSlash,stripTrailingSlash;_91c‍.w("./misc",[["reportAndThrowError",["reportAndThrowError"],function(v){reportAndThrowError=v}],["stripLeadingSlash",["stripLeadingSlash"],function(v){stripLeadingSlash=v}],["stripTrailingSlash",["stripTrailingSlash"],function(v){stripTrailingSlash=v}]]);let fetchLogo,fetchPkg,fetchStats;_91c‍.w("./fetch",[["fetchLogo",["fetchLogo"],function(v){fetchLogo=v}],["fetchPkg",["fetchPkg"],function(v){fetchPkg=v}],["fetchStats",["fetchStats"],function(v){fetchStats=v}]]);


       const collectiveSlugFromUrl = url => url.substr(url.lastIndexOf('/') + 1).toLowerCase().replace(/\.json/g, '');_91c‍.u(["collectiveSlugFromUrl"]);

       const collectiveUrl = pkg => {
  const url = pkg.collective && pkg.collective.url

  if (!url) {
    _91c‍.a("reportAndThrowError",reportAndThrowError)('No collective URL set!')
  }

  return _91c‍.a("stripTrailingSlash",stripTrailingSlash)(url)
};_91c‍.u(["collectiveUrl"]);

// use pkg.collective.logo for "legacy"/compatibility reasons
       const collectiveLogoUrl = pkg => pkg.collective.logo || pkg.collective.logoUrl || false;_91c‍.u(["collectiveLogoUrl"]);

       const collectiveDonationText = pkg => (pkg.collective.donation && pkg.collective.donation.text) || 'Donate:';_91c‍.u(["collectiveDonationText"]);

       const getCollective = async pkgPath => {
  const pkg = _91c‍.a("fetchPkg",fetchPkg)(pkgPath)
  const url = collectiveUrl(pkg)
  const baseCollective = {
    url,
    slug: collectiveSlugFromUrl(url),
    logoUrl: collectiveLogoUrl(pkg),
    donationUrl: collectiveDonationUrl(pkg),
    donationText: collectiveDonationText(pkg)
  }
  const logoUrl = baseCollective.logoUrl
  const promises = [_91c‍.a("fetchStats",fetchStats)(url)].concat(logoUrl ? _91c‍.a("fetchLogo",fetchLogo)(logoUrl) : [])

  const [stats, logo] = await Promise.all(promises)

  return Object.assign(baseCollective, { stats, logo })
};_91c‍.u(["getCollective"]);

       const collectiveDonationUrl = pkg => {
  const defaultDonationAmount = pkg.collective.donation && pkg.collective.donation.amount

  let donateUrl = `${collectiveUrl(pkg)}/${retrieveDonationSlug(pkg)}`

  if (defaultDonationAmount) {
    return `${donateUrl}/${defaultDonationAmount}`
  }

  return donateUrl
};_91c‍.u(["collectiveDonationUrl"]);

       const retrieveDonationSlug = pkg => {
  const rawDonationSlug = (pkg.collective.donation && pkg.collective.donation.slug)

  if (!rawDonationSlug) {
    return 'donate'
  }

  return _91c‍.a("stripLeadingSlash",stripLeadingSlash)(rawDonationSlug)
};_91c‍.u(["retrieveDonationSlug"]);
